// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'src/infra/models/recipe_model.dart';
import 'src/infra/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7534387712299653753),
      name: 'UserModel',
      lastPropertyId: const IdUid(4, 9020311608899897377),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3546451963022079823),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2779407367017585064),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 541839377861496423),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9020311608899897377),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7176259311812261820),
      name: 'RecipeModel',
      lastPropertyId: const IdUid(5, 1269506162515179846),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7195376055698047205),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 859095480889184475),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5765635249936506988),
            relationTarget: 'UserModel'),
        ModelProperty(
            id: const IdUid(3, 8704337338940089872),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5374830939479975735),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1269506162515179846),
            name: 'desc',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 8896569351882551780),
            name: 'bookmarks',
            targetId: const IdUid(1, 7534387712299653753))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7176259311812261820),
      lastIndexId: const IdUid(1, 5765635249936506988),
      lastRelationId: const IdUid(1, 8896569351882551780),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserModel: EntityDefinition<UserModel>(
        model: _entities[0],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    RecipeModel: EntityDefinition<RecipeModel>(
        model: _entities[1],
        toOneRelations: (RecipeModel object) => [object.owner],
        toManyRelations: (RecipeModel object) =>
            {RelInfo<RecipeModel>.toMany(1, object.id): object.bookmarks},
        getId: (RecipeModel object) => object.id,
        setId: (RecipeModel object, int id) {
          object.id = id;
        },
        objectToFB: (RecipeModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final imageOffset = fbb.writeString(object.image);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.owner.targetId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, descOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RecipeModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              owner: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              bookmarks: ToMany());
          object.owner.attach(store);
          InternalToManyAccess.setRelInfo<RecipeModel>(object.bookmarks, store,
              RelInfo<RecipeModel>.toMany(1, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id]
  static final id = QueryIntegerProperty<UserModel>(_entities[0].properties[0]);

  /// see [UserModel.name]
  static final name =
      QueryStringProperty<UserModel>(_entities[0].properties[1]);

  /// see [UserModel.email]
  static final email =
      QueryStringProperty<UserModel>(_entities[0].properties[2]);

  /// see [UserModel.password]
  static final password =
      QueryStringProperty<UserModel>(_entities[0].properties[3]);
}

/// [RecipeModel] entity fields to define ObjectBox queries.
class RecipeModel_ {
  /// see [RecipeModel.id]
  static final id =
      QueryIntegerProperty<RecipeModel>(_entities[1].properties[0]);

  /// see [RecipeModel.owner]
  static final owner =
      QueryRelationToOne<RecipeModel, UserModel>(_entities[1].properties[1]);

  /// see [RecipeModel.name]
  static final name =
      QueryStringProperty<RecipeModel>(_entities[1].properties[2]);

  /// see [RecipeModel.image]
  static final image =
      QueryStringProperty<RecipeModel>(_entities[1].properties[3]);

  /// see [RecipeModel.desc]
  static final desc =
      QueryStringProperty<RecipeModel>(_entities[1].properties[4]);

  /// see [RecipeModel.bookmarks]
  static final bookmarks =
      QueryRelationToMany<RecipeModel, UserModel>(_entities[1].relations[0]);
}
